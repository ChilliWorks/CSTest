#!/usr/bin/python
#
#  music_builder.py
#  CSTest
#  Created by Ian Copland on 14/03/2016.
#
#  The MIT License (MIT)
#
#  Copyright (c) 2016 Tag Games Limited
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#

import sys
import os
import subprocess
import shutil
import file_system_utils

relative_tool_path = "../../ChilliSource/Tools/CkTool.jar"

#------------------------------------------------------------------------------
# Walks the source directory and converts all wav, ogg and MP3 files and
# to a Cricket Audio Stream then outputs them to the destination path.
#
# @author Ian Copland
#
# @param source_directory_path - The source directory path.
# @param dest_directory_path - The destination directory path.
#------------------------------------------------------------------------------
def build(source_directory_path, dest_directory_path):
	print("-----------------------------------------")
	print("           Building Music")
	print("-----------------------------------------")

	if(source_directory_path.endswith("/") == False):
		source_directory_path = source_directory_path + "/"

	if(dest_directory_path.endswith("/") == False):
		dest_directory_path = dest_directory_path + "/"

	file_system_utils.delete_directory(dest_directory_path)

	for directory, sub_dirs, filenames in os.walk(source_directory_path):
		input_dir = directory
		output_dir = os.path.join(dest_directory_path, input_dir[len(source_directory_path):len(input_dir)]);

		for filename in filenames:
			if (file_system_utils.has_extension(filename, ".wav") == True) or (file_system_utils.has_extension(filename, ".mp3") == True) or (file_system_utils.has_extension(filename, ".ogg") == True):
				if os.path.exists(output_dir) == False:
					os.makedirs(output_dir);
				
				output_file_path = os.path.splitext(os.path.join(output_dir, filename))[0] + ".cks"
				build_music(os.path.join(directory, filename), output_file_path)

	print (" ")

#------------------------------------------------------------------------------
# Converts a single audio file into a Cricket Audio Stream.
#
# @author Ian Copland
#
# @param input_file_path - The input file path to pass to CkTool.
# @param output_file_path - The output file path which will be generated by
# CkTool.
#------------------------------------------------------------------------------
def build_music(input_file_path, output_file_path):
	print(output_file_path)

	tool_path = file_system_utils.get_path_from_here(relative_tool_path)
	subprocess.call(["java", "-Djava.awt.headless=true", "-Xmx512m", "-jar", tool_path, "--action", "buildstream", "--input", input_file_path, "--output", output_file_path]);

#------------------------------------------------------------------------------
# The entry point into the script.
#
# @author Ian Copland
#
# @param args - The list of arguments. There must be exactly 3 arguments: The
# location of the script, the source directory and the output directory.
#------------------------------------------------------------------------------
def main(args):
	if not len(args) is 3:
		print("ERROR: Invalid parameters supplied.")
		return

	source_directory_path = args[1]
	dest_directory_path = args[2]
	build(source_directory_path, dest_directory_path)

if __name__ == "__main__":
	main(sys.argv)

