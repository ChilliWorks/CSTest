//
//  The MIT License (MIT)
//
//  Copyright (c) 2014 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

GLSL
{
	VertexShader
	{
#ifndef GL_ES
        #define lowp
        #define mediump
        #define highp
#endif

        //attributes
        attribute highp vec4 a_position;
        attribute mediump vec3 a_normal;
        attribute mediump vec2 a_texCoord;

        //uniforms
        uniform highp mat4 u_wvpMat;
        uniform highp mat4 u_worldMat;
        uniform highp mat4 u_normalMat;
        uniform highp vec3 u_cameraPos;

        //varyings
        varying mediump vec2 vvTexCoord;
        varying mediump vec3 vvEnvTexCoord;

        void main()
        {
            gl_Position = u_wvpMat * a_position;
            vec4 vWorldPosition = u_worldMat * a_position;
            
            vec3 vNormal = normalize((u_normalMat * vec4(a_normal, 1.0)).xyz);
            vec3 vWorldViewDir = normalize(vWorldPosition.xyz - u_cameraPos);

            vvEnvTexCoord = reflect(vWorldViewDir, vNormal);
            
            vvTexCoord = a_texCoord;
        }
	}

	FragmentShader
	{
#ifndef GL_ES
		#define lowp
		#define mediump
		#define highp
#else
		precision lowp float;
#endif

		//uniforms
		uniform lowp sampler2D u_texture0;
		uniform lowp samplerCube u_cubemap0;

		//varyings
		varying mediump vec2 vvTexCoord;
		varying mediump vec3 vvEnvTexCoord;

		void main()
		{
			vec3 albedo = texture2D(u_texture0, vvTexCoord).xyz;
			vec3 reflection = textureCube(u_cubemap0, vvEnvTexCoord).xyz;

			vec3 result = mix(albedo, reflection, 0.8);
			gl_FragColor = vec4(result.x, result.y, result.z, 1.0);
		}
	}
}